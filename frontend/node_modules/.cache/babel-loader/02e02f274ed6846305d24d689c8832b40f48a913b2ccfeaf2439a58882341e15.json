{"ast":null,"code":"import{useEffect}from'react';import{useNavigate,useLocation}from'react-router-dom';import{useAuth}from'../../context/AuthContext';// Ajusta la ruta según tu estructura\nconst AuthVerify=()=>{const{logout}=useAuth();// Ahora se usa la variable\nconst navigate=useNavigate();const location=useLocation();useEffect(()=>{const token=localStorage.getItem('authToken');if(!token&&location.pathname!=='/login'){logout();navigate('/login');}},[location,navigate,logout]);return null;};export default AuthVerify;","map":{"version":3,"names":["useEffect","useNavigate","useLocation","useAuth","AuthVerify","logout","navigate","location","token","localStorage","getItem","pathname"],"sources":["C:/Users/SENA/Documents/GitHub/Sena_Inventario/frontend/src/components/common/AuthVerify.jsx"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext'; // Ajusta la ruta según tu estructura\r\n\r\nconst AuthVerify = () => {\r\n  const { logout } = useAuth(); // Ahora se usa la variable\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (!token && location.pathname !== '/login') {\r\n      logout();\r\n      navigate('/login');\r\n    }\r\n  }, [location, navigate, logout]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default AuthVerify;"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CAC3D,OAASC,OAAO,KAAQ,2BAA2B,CAAE;AAErD,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB,KAAM,CAAEC,MAAO,CAAC,CAAGF,OAAO,CAAC,CAAC,CAAE;AAC9B,KAAM,CAAAG,QAAQ,CAAGL,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAM,QAAQ,CAAGL,WAAW,CAAC,CAAC,CAE9BF,SAAS,CAAC,IAAM,CACd,KAAM,CAAAQ,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAC/C,GAAI,CAACF,KAAK,EAAID,QAAQ,CAACI,QAAQ,GAAK,QAAQ,CAAE,CAC5CN,MAAM,CAAC,CAAC,CACRC,QAAQ,CAAC,QAAQ,CAAC,CACpB,CACF,CAAC,CAAE,CAACC,QAAQ,CAAED,QAAQ,CAAED,MAAM,CAAC,CAAC,CAEhC,MAAO,KAAI,CACb,CAAC,CAED,cAAe,CAAAD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}