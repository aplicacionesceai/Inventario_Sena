{"ast":null,"code":"import{useState,useCallback}from'react';import api from'../services/api';const useRegistros=()=>{const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[loaded,setLoaded]=useState(false);const getRegistros=useCallback(async()=>{if(loaded)return null;setLoading(true);setError(null);try{const response=await api.get('/registros/');setLoaded(true);return response.data;}catch(err){var _err$response;setError(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.data)||err.message);throw err;}finally{setLoading(false);}},[loaded]);const createRegistro=async registroData=>{setLoading(true);setError(null);try{// 1. Crear ambiente primero\nconst ambienteRes=await api.post('/ambientes/',{sede:registroData.ambiente.sede,bloque:registroData.ambiente.bloque,piso:registroData.ambiente.piso,tipo_ambiente:registroData.ambiente.tipo_ambiente,nombre:registroData.ambiente.nombre});// 2. Crear registro con el ID del ambiente\nconst registroPayload={...registroData,ambiente:ambienteRes.data.id};const registroRes=await api.post('/registros/',registroPayload);return registroRes.data;}catch(err){var _err$response2;setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.data)||err.message);throw err;}finally{setLoading(false);}};const reset=()=>{setLoaded(false);setError(null);};return{loading,error,getRegistros,loaded,reset,createRegistro};};export default useRegistros;","map":{"version":3,"names":["useState","useCallback","api","useRegistros","loading","setLoading","error","setError","loaded","setLoaded","getRegistros","response","get","data","err","_err$response","message","createRegistro","registroData","ambienteRes","post","sede","ambiente","bloque","piso","tipo_ambiente","nombre","registroPayload","id","registroRes","_err$response2","reset"],"sources":["C:/Users/SENA/Documents/GitHub/Sena_Inventario/frontend/src/hooks/useRegistros.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst useRegistros = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const getRegistros = useCallback(async () => {\r\n    if (loaded) return null;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await api.get('/registros/');\r\n      setLoaded(true);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data || err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loaded]);\r\n\r\n  const createRegistro = async (registroData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // 1. Crear ambiente primero\r\n      const ambienteRes = await api.post('/ambientes/', {\r\n        sede: registroData.ambiente.sede,\r\n        bloque: registroData.ambiente.bloque,\r\n        piso: registroData.ambiente.piso,\r\n        tipo_ambiente: registroData.ambiente.tipo_ambiente,\r\n        nombre: registroData.ambiente.nombre\r\n      });\r\n      \r\n      // 2. Crear registro con el ID del ambiente\r\n      const registroPayload = {\r\n        ...registroData,\r\n        ambiente: ambienteRes.data.id\r\n      };\r\n      \r\n      const registroRes = await api.post('/registros/', registroPayload);\r\n      return registroRes.data;\r\n    } catch (err) {\r\n      setError(err.response?.data || err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setLoaded(false);\r\n    setError(null);\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getRegistros,\r\n    loaded,\r\n    reset,\r\n    createRegistro\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\nexport default useRegistros;"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAC7C,MAAO,CAAAC,GAAG,KAAM,iBAAiB,CAEjC,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzB,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGL,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACM,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACQ,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CAE3C,KAAM,CAAAU,YAAY,CAAGT,WAAW,CAAC,SAAY,CAC3C,GAAIO,MAAM,CAAE,MAAO,KAAI,CAEvBH,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CACd,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAT,GAAG,CAACU,GAAG,CAAC,aAAa,CAAC,CAC7CH,SAAS,CAAC,IAAI,CAAC,CACf,MAAO,CAAAE,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,GAAG,CAAE,KAAAC,aAAA,CACZR,QAAQ,CAAC,EAAAQ,aAAA,CAAAD,GAAG,CAACH,QAAQ,UAAAI,aAAA,iBAAZA,aAAA,CAAcF,IAAI,GAAIC,GAAG,CAACE,OAAO,CAAC,CAC3C,KAAM,CAAAF,GAAG,CACX,CAAC,OAAS,CACRT,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,CAACG,MAAM,CAAC,CAAC,CAEZ,KAAM,CAAAS,cAAc,CAAG,KAAO,CAAAC,YAAY,EAAK,CAC7Cb,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CACd,GAAI,CACF;AACA,KAAM,CAAAY,WAAW,CAAG,KAAM,CAAAjB,GAAG,CAACkB,IAAI,CAAC,aAAa,CAAE,CAChDC,IAAI,CAAEH,YAAY,CAACI,QAAQ,CAACD,IAAI,CAChCE,MAAM,CAAEL,YAAY,CAACI,QAAQ,CAACC,MAAM,CACpCC,IAAI,CAAEN,YAAY,CAACI,QAAQ,CAACE,IAAI,CAChCC,aAAa,CAAEP,YAAY,CAACI,QAAQ,CAACG,aAAa,CAClDC,MAAM,CAAER,YAAY,CAACI,QAAQ,CAACI,MAChC,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,eAAe,CAAG,CACtB,GAAGT,YAAY,CACfI,QAAQ,CAAEH,WAAW,CAACN,IAAI,CAACe,EAC7B,CAAC,CAED,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAA3B,GAAG,CAACkB,IAAI,CAAC,aAAa,CAAEO,eAAe,CAAC,CAClE,MAAO,CAAAE,WAAW,CAAChB,IAAI,CACzB,CAAE,MAAOC,GAAG,CAAE,KAAAgB,cAAA,CACZvB,QAAQ,CAAC,EAAAuB,cAAA,CAAAhB,GAAG,CAACH,QAAQ,UAAAmB,cAAA,iBAAZA,cAAA,CAAcjB,IAAI,GAAIC,GAAG,CAACE,OAAO,CAAC,CAC3C,KAAM,CAAAF,GAAG,CACX,CAAC,OAAS,CACRT,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAA0B,KAAK,CAAGA,CAAA,GAAM,CAClBtB,SAAS,CAAC,KAAK,CAAC,CAChBF,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAED,MAAO,CACLH,OAAO,CACPE,KAAK,CACLI,YAAY,CACZF,MAAM,CACNuB,KAAK,CACLd,cACF,CAAC,CACH,CAAC,CAKD,cAAe,CAAAd,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}