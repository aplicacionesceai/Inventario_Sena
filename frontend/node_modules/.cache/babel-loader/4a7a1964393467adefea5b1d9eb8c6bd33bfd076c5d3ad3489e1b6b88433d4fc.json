{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport api from '../services/api';\nconst useRegistros = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const getRegistros = useCallback(async () => {\n    if (loaded) return null;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.get('/registros/');\n      setLoaded(true);\n      return response.data;\n    } catch (err) {\n      var _err$response;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [loaded]);\n  const createRegistro = async registroData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // 1. Crear ambiente primero\n      const ambienteRes = await api.post('/ambientes/', {\n        sede: registroData.ambiente.sede,\n        bloque: registroData.ambiente.bloque,\n        piso: registroData.ambiente.piso,\n        tipo_ambiente: registroData.ambiente.tipo_ambiente,\n        nombre: registroData.ambiente.nombre\n      });\n\n      // 2. Crear registro con el ID del ambiente\n      const registroPayload = {\n        ...registroData,\n        ambiente: ambienteRes.data.id\n      };\n      const registroRes = await api.post('/registros/', registroPayload);\n      return registroRes.data;\n    } catch (err) {\n      var _err$response2;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const reset = () => {\n    setLoaded(false);\n    setError(null);\n  };\n  return {\n    loading,\n    error,\n    getRegistros,\n    loaded,\n    reset,\n    createRegistro\n  };\n};\n_s(useRegistros, \"Rrl5rxHuGO6kV0gx75kSC/5pkX8=\");\nexport default useRegistros;","map":{"version":3,"names":["useState","useCallback","api","useRegistros","_s","loading","setLoading","error","setError","loaded","setLoaded","getRegistros","response","get","data","err","_err$response","message","createRegistro","registroData","ambienteRes","post","sede","ambiente","bloque","piso","tipo_ambiente","nombre","registroPayload","id","registroRes","_err$response2","reset"],"sources":["C:/Users/SENA/Documents/GitHub/Sena_Inventario/frontend/src/hooks/useRegistros.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst useRegistros = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const getRegistros = useCallback(async () => {\r\n    if (loaded) return null;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await api.get('/registros/');\r\n      setLoaded(true);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data || err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [loaded]);\r\n\r\n  const createRegistro = async (registroData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      // 1. Crear ambiente primero\r\n      const ambienteRes = await api.post('/ambientes/', {\r\n        sede: registroData.ambiente.sede,\r\n        bloque: registroData.ambiente.bloque,\r\n        piso: registroData.ambiente.piso,\r\n        tipo_ambiente: registroData.ambiente.tipo_ambiente,\r\n        nombre: registroData.ambiente.nombre\r\n      });\r\n      \r\n      // 2. Crear registro con el ID del ambiente\r\n      const registroPayload = {\r\n        ...registroData,\r\n        ambiente: ambienteRes.data.id\r\n      };\r\n      \r\n      const registroRes = await api.post('/registros/', registroPayload);\r\n      return registroRes.data;\r\n    } catch (err) {\r\n      setError(err.response?.data || err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setLoaded(false);\r\n    setError(null);\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getRegistros,\r\n    loaded,\r\n    reset,\r\n    createRegistro\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\nexport default useRegistros;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,OAAOC,GAAG,MAAM,iBAAiB;AAEjC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMW,YAAY,GAAGV,WAAW,CAAC,YAAY;IAC3C,IAAIQ,MAAM,EAAE,OAAO,IAAI;IAEvBH,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,aAAa,CAAC;MAC7CH,SAAS,CAAC,IAAI,CAAC;MACf,OAAOE,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,aAAA;MACZR,QAAQ,CAAC,EAAAQ,aAAA,GAAAD,GAAG,CAACH,QAAQ,cAAAI,aAAA,uBAAZA,aAAA,CAAcF,IAAI,KAAIC,GAAG,CAACE,OAAO,CAAC;MAC3C,MAAMF,GAAG;IACX,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACG,MAAM,CAAC,CAAC;EAEZ,MAAMS,cAAc,GAAG,MAAOC,YAAY,IAAK;IAC7Cb,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF;MACA,MAAMY,WAAW,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAE;QAChDC,IAAI,EAAEH,YAAY,CAACI,QAAQ,CAACD,IAAI;QAChCE,MAAM,EAAEL,YAAY,CAACI,QAAQ,CAACC,MAAM;QACpCC,IAAI,EAAEN,YAAY,CAACI,QAAQ,CAACE,IAAI;QAChCC,aAAa,EAAEP,YAAY,CAACI,QAAQ,CAACG,aAAa;QAClDC,MAAM,EAAER,YAAY,CAACI,QAAQ,CAACI;MAChC,CAAC,CAAC;;MAEF;MACA,MAAMC,eAAe,GAAG;QACtB,GAAGT,YAAY;QACfI,QAAQ,EAAEH,WAAW,CAACN,IAAI,CAACe;MAC7B,CAAC;MAED,MAAMC,WAAW,GAAG,MAAM5B,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAEO,eAAe,CAAC;MAClE,OAAOE,WAAW,CAAChB,IAAI;IACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAgB,cAAA;MACZvB,QAAQ,CAAC,EAAAuB,cAAA,GAAAhB,GAAG,CAACH,QAAQ,cAAAmB,cAAA,uBAAZA,cAAA,CAAcjB,IAAI,KAAIC,GAAG,CAACE,OAAO,CAAC;MAC3C,MAAMF,GAAG;IACX,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM0B,KAAK,GAAGA,CAAA,KAAM;IAClBtB,SAAS,CAAC,KAAK,CAAC;IAChBF,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAED,OAAO;IACLH,OAAO;IACPE,KAAK;IACLI,YAAY;IACZF,MAAM;IACNuB,KAAK;IACLd;EACF,CAAC;AACH,CAAC;AAACd,EAAA,CAhEID,YAAY;AAqElB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}